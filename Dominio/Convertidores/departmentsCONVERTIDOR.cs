//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/04/19 - 13:28:00
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Dominio.Dtos;
using PersistenciaDatos;

namespace Dominio.Convertidores
{

    /// <summary>
    /// Assembler for <see cref="departments"/> and <see cref="departmentsDTO"/>.
    /// </summary>
    public static partial class departmentsCONVERTIDOR
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="departmentsDTO"/> converted from <see cref="departments"/>.</param>
        static partial void OnDTO(this departments entity, departmentsDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="departments"/> converted from <see cref="departmentsDTO"/>.</param>
        static partial void OnEntity(this departmentsDTO dto, departments entity);

        /// <summary>
        /// Converts this instance of <see cref="departmentsDTO"/> to an instance of <see cref="departments"/>.
        /// </summary>
        /// <param name="dto"><see cref="departmentsDTO"/> to convert.</param>
        public static departments ToEntity(this departmentsDTO dto)
        {
            if (dto == null) return null;

            var entity = new departments();

            entity.id_department = dto.id_department;
            entity.name = dto.name;
            entity.description = dto.description;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="departments"/> to an instance of <see cref="departmentsDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="departments"/> to convert.</param>
        public static departmentsDTO ToDTO(this departments entity)
        {
            if (entity == null) return null;

            var dto = new departmentsDTO();

            dto.id_department = entity.id_department;
            dto.name = entity.name;
            dto.description = entity.description;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="departmentsDTO"/> to an instance of <see cref="departments"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<departments> ToEntities(this IEnumerable<departmentsDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="departments"/> to an instance of <see cref="departmentsDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<departmentsDTO> ToDTOs(this IEnumerable<departments> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }
        public static void Actualizar(Dominio.Dtos.departmentsDTO dto, PersistenciaDatos.departments entity)
        {
            entity.id_department = dto.id_department;
            entity.name = dto.name;
            entity.description = dto.description;

        }

    }
}
